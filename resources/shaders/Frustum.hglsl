// Frustum header file

struct Plane
{
    vec3  N;
    float d;
};

struct Frustum
{
    Plane m_plane[4];

    Plane nearPlane;
    Plane farPlane;
};

struct LightTile
{
    uint offset;
    uint size;
};

/*uniform int frustumSize;
uniform mat4 projMatInv;

layout(std140) uniform GlobalSizeUniformBlock
{
    Resolution m_tileResolution;
};

layout(std140) uniform ForwardPlusResolutionUniformBlock
{
    Resolution m_forwardPlusResolution;
};

vec3 screenToView(vec4 screenPos)
{
    // Screen space to clip space
    vec4 clipPos =
        vec4(screenPos.x / m_forwardPlusResolution.width, screenPos.y / m_forwardPlusResolution.height, screenPos.z, 1.0f);
    
    clipPos.x = -2.0f * clipPos.x + 1.0f;
    clipPos.y =  2.0f * clipPos.y - 1.0f;
    
    // Clip space to view space
    vec4 viewPos = projMatInv * clipPos;
    viewPos.xyz /= viewPos.w;
    
    return viewPos.xyz;
}*/